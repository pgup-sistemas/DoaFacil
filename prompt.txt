
### **Prompt para AI – Criar Sistema de Arrecadação e Doações com Flask e Bulma**

*Prompt Atualizado para Criar o Sistema de Arrecadação de Doações com Flask
Objetivo: Criar um sistema web de arrecadação de alimentos e doações em dinheiro utilizando Flask (Python) para o backend e Bulma para o frontend, com funcionalidades de gestão por unidades organizadoras, fluxos de doações interativos, notificações em tempo real e integração via API RESTful.

Fluxos e Funcionalidades do Sistema
Cadastro de Unidades Organizadas

Objetivo: Permitir que um administrador cadastre unidades organizadoras, como igrejas, ONGs ou grupos comunitários.

Funcionalidades:
Nome da unidade
Responsável
E-mail (opcional)
Descrição

O administrador pode criar múltiplas unidades para gerenciar diferentes campanhas de arrecadação.
Criação e Gerenciamento de Listas de Arrecadação

Objetivo: Cada unidade pode criar listas de arrecadação, definindo itens a serem arrecadados ou doações em dinheiro.

Funcionalidades:
Definição do nome e descrição da lista.
Tipo de doação: itens físicos ou dinheiro (ou ambos).

Modo de lista:
Aberto: Doadores sugerem itens.
Fechado: O administrador define os itens e a quantidade necessária.
Link único gerado para cada lista que pode ser compartilhado.
Doações de Itens e Dinheiro

Objetivo: Permitir que os doadores escolham o que doar (itens ou dinheiro).

Funcionalidades:

Doadores podem doar itens dentro dos limites estabelecidos ou valores financeiros via chave Pix (ou outros meios definidos).
O sistema atualiza automaticamente o progresso de cada item.
Notificações e Alertas
Objetivo: Enviar notificações para administradores e doadores para mantê-los informados sobre as doações e o progresso das metas.

Funcionalidades:
Notificação para Administradores: Enviar um e-mail ou SMS para o administrador sempre que um novo doador realizar uma contribuição.
Notificação de Meta Atingida: Enviar uma mensagem aos doadores quando a meta de arrecadação de um item for alcançada.
Dashboard do Administrador

Objetivo: Fornecer ao administrador uma visão detalhada sobre o status das campanhas de arrecadação.

Funcionalidades:

Visualização de todas as listas de arrecadação criadas pela unidade.
Exibição do progresso de arrecadação de cada item.
Exportação de dados em CSV ou PDF para relatórios.
Edição limitada das listas de arrecadação (sem alterar doações já realizadas).
API RESTful para Integração com Outros Sistemas

Objetivo: Criar uma API que permita integrar o sistema com outras plataformas externas para melhorar a flexibilidade e escalabilidade.

Funcionalidades:
Endpoints para cadastro de doações, consulta de listas e itens.
Autenticação segura usando tokens JWT ou API Keys.

Exemplo de endpoints:
POST /api/donations: Registrar uma nova doação.
GET /api/lists/<list_id>: Consultar o status de uma lista de arrecadação.
GET /api/items/<item_id>: Verificar o progresso de um item de arrecadação.

Tecnologias e Frameworks Utilizados

Backend:
Flask (Python)
Flask-Mail (para envio de e-mails)
Flask-RESTful (para criação da API RESTful)
JWT ou API Keys (para segurança da API)

Frontend:
HTML, CSS (Bulma) para o layout responsivo (mobile-first).

Exportação de Dados:
WeasyPrint ou xhtml2pdf (para gerar PDF)

Banco de Dados:
SQLAlchemy (ORM para banco de dados relacional)
SQLite (para desenvolvimento) ou PostgreSQL (produção)

Deployment:
Heroku ou DigitalOcean para produção.
GitHub para versionamento.

#### **Funções e Comportamentos Esperados**

* **Cadastro de Unidade**: Fluxo de cadastro de unidade e associar a listas.
* **Cadastro de Lista**: Definir itens a serem arrecadados e quantidade necessária.
* **Doação**: Usuário escolhe os itens que quer doar ou faz doação em dinheiro via Pix.
* **Edição de Lista**: O administrador pode editar listas de arrecadação, mas **itens doados não podem ser alterados**.
* **Progressão da Lista**: Mostrar o progresso de cada item de acordo com as doações.
* **Exportação de Dados**: Gerar relatórios de arrecadação em CSV ou PDF.

#### **Exemplo de Funcionalidades**

1. **Página de Criação de Lista (Admin)**:

   * Formulário para cadastrar o nome da lista, descrição e definir o tipo de doação (itens ou dinheiro).
   * Se o tipo for "itens", um campo para adicionar produtos (ex: "Arroz", "Feijão").
   * Se o tipo for "dinheiro", exibição de um campo de chave Pix.

2. **Página de Visualização de Lista (Público)**:

   * Exibição de itens com a quantidade necessária e já doada.
   * Botão de "Quero ajudar" para doar qualquer quantidade do item.
   * Informações de chave Pix para doações financeiras.

3. **Página de Dashboard**:

   * Exibição das listas criadas, com gráficos de progresso, quantidade arrecadada e exportação de dados.
   * Opções para editar as listas ou encerrar.

---

### **Saída Esperada**

1. **Código Completo do Backend** com Flask e banco de dados configurado.
2. **Templates em HTML** com Bulma para a interface do usuário.
3. **Função de Exportação** para CSV e PDF implementada.
4. **Código de Dashboard** e visualização interativa do progresso das arrecadações.
5. **Estrutura de Dados** configurada no banco de dados (SQLite/PostgreSQL).

---

### **Prompt Completo**

**"Crie um sistema de arrecadação de alimentos e doações financeiras usando Flask (Python) para o backend e Bulma para o frontend. O sistema deve permitir que organizações (igrejas, ONGs, grupos comunitários) criem 'unidades organizadoras' e dentro de cada unidade, várias listas de arrecadação com itens físicos e/ou doações em dinheiro. As funcionalidades incluem: cadastro de unidades, criação de listas com itens e quantidades, visualização pública das listas de arrecadação, doações por itens ou dinheiro via chave Pix, painel de controle para administração de listas, edição limitada das listas, e exportação de dados para CSV e PDF. O sistema deve ser responsivo e ideal para dispositivos móveis."**


